from Crypto.Util.number import bytes_to_long,inverse,getPrime,long_to_bytes
from Crypto.PublicKey import RSA    #常用于导入公钥
from gmpy2 import gcd,gcdext   #欧几里得算法和欧几里得扩展算法，分别用于求解最大公因数和求解s

### 导入公钥例程 ###
# with open("pubkey1.pem","rb") as f:
#     pk1_bit= f.read()
# with open("pubkey2.pem","rb") as f:
#     pk2_bit =f.read();
#
# pk1 = RSA.importKey(pk1_bit)
# pk2 = RSA.importKey(pk2_bit)
#
# n1 = pk1.n
# e1 = pk1.e
# n2 = pk2.n
# e2 = pk2.e
###


### RSA常规解密算法 ###

# n1=23220619839642624127208804329329079289273497927351564011985292026254914394833691542552890810511751239656361686073628273309390314881604580204429708461587512500636158161303419916259271078173864800267063540526943181173708108324471815782985626723198144643256432774984884880698594364583949485749575467318173034467846143380574145455195152793742611717169602237969286580028662721065495380192815175057945420182742366791661416822623915523868590710387635935179876275147056396018527260488459333051132720558953142984038635223793992651637708150494964785475065404568844039983381403909341302098773533325080910057845573898984314246089
# p1=138376604533530412400239558340424700312412702699022481119357799054715877829291635290832719835033140580690053865677079316241919169166375123691917675235979462772103681398725285808551041924624882840901583892858174270714471366531758975241868470938138238307005782651296179579961869801841395682782645916848523771439
# q1=167807411649676462546661119644113081915542378755778327057156191284453150887662343414908916953154897183613548083558919410359642450001343644814021159828724844730881111955050992398535063409828169462180970629537792676998647880110463527555034040871485964361418080481113059959410616446772218038141157051007091689351
# e1=65537
# c1=9700614748413503291260966231863562117502096284616216707445276355274869086619796527618473213422509996843430296526594113572675840559345077344419098900818709577642324900405582499683604786981144099878021784567540654040833912063141709913653416394888766281465200682852378794478801329251224801006820925858507273130504236563822120838520746270280731121442839412258397191963036040553539697846535038841541209050503061001070909725806574230090246041891486506980939294245537252610944799573920844235221096956391095716111629998594075762507345430945523492775915790828078000453705320783486744734994213028476446922815870053311973844961
#
# n2=22642739016943309717184794898017950186520467348317322177556419830195164079827782890660385734113396507640392461790899249329899658620250506845740531699023854206947331021605746078358967885852989786535093914459120629747240179425838485974008209140597947135295304382318570454491064938082423309363452665886141604328435366646426917928023608108470382196753292656828513681562077468846105122812084765257799070754405638149508107463233633350462138751758913036373169668828888213323429656344812014480962916088695910177763839393954730732312224100718431146133548897031060554005592930347226526561939922660855047026581292571487960929911
# p2=138376604533530412400239558340424700312412702699022481119357799054715877829291635290832719835033140580690053865677079316241919169166375123691917675235979462772103681398725285808551041924624882840901583892858174270714471366531758975241868470938138238307005782651296179579961869801841395682782645916848523771439
# q2=163631266233712837481823088378337134151021871060275887871338250274359922218053543333532579728777813509956261662615493179160669715503833949420308311581736674332268131534602581626817039237393599222688271607325131529790640375765697832746614700483681658911753936520482383592478743093233261371451718844275762094649
# e2=65537
# c2=20513108670823938405207629835395350087127287494963553421797351726233221750526355985253069487753150978011340115173042210284965521215128799369083065796356395285905154260709263197195828765397189267866348946188652752076472172155755940282615212228370367042435203584159326078238921502151083768908742480756781277358357734545694917591921150127540286087770229112383605858821811640935475859936319249757754722093551370392083736485637225052738864742947137890363135709796410008845576985297696922681043649916650599349320818901512835007050425460872675857974069927846620905981374869166202896905600343223640296138423898703137236463508
#
# phi_1 = (p1-1)*(q1-1)
# phi_2 = (p2-1)*(q2-1)
#
# d1 = inverse(e1,phi_1)
# d2 = inverse(e2,phi_2)
#
# m1 =pow(c1,d1,n1)
# m2 =pow(c2,d2,n2)
#
# print(long_to_bytes(m1)+long_to_bytes(m2))
###

### RSA共模攻击例程 ###
# with open("cipher1.txt","rb") as f:
#     c1= f.read()
# with open("cipher2.txt","rb") as f:
#     c2= f.read()
#
# c1= bytes_to_long(c1)
# c2= bytes_to_long(c2)
#
# s= gcdext(e1,e2)
# # print(s)
#
# m = (pow(c1,s[1],n1)*pow(c2,s[2],n2) ) % n1
# m = long_to_bytes(m)
# print(m)
###
